// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{
    FIBONACCI_GUEST_ELF, FIBONACCI_GUEST_ID
};
use risc0_zkvm::{default_prover, ExecutorEnv, ProveInfo};

fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    // For example:x
    let n : u32 = 123 ;
    let env = ExecutorEnv::builder().write(&n).unwrap().build().unwrap();
    println!("Host side : {}", n) ;
    let prover = default_prover() ; 
    let proverInfo = prover.prove(env, FIBONACCI_GUEST_ELF).unwrap() ; 
    let receipt = proverInfo.receipt ;

    // For example:
    // let n : u32 = receipt.journal.decode().unwrap();
    // println!("Output : {} ", n);

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    // receipt
    //     .verify(FIBONACCI_GUEST_ID)
    //     .unwrap();
}
